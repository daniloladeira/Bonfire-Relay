const fs = require('fs');
const path = require('path');

// Mapeamento de emojis para caracteres ASCII
const emojiMap = {
  'üî•': '[*]',
  'üßô': '[FIRE]',
  'üõ°Ô∏è': '[SMTH]',
  'üìö': '[SAGE]',
  'üêç': '[SERP]',
  '‚ö∞Ô∏è': '[THIF]',
  'üë§': '[USER]',
  'üìç': '[LOC]',
  'üåü': '[STAR]',
  '‚öîÔ∏è': '[X]',
  'üè∞': '[CAST]',
  'üó°Ô∏è': '[-]',
  'üíÄ': '[+]',
  'üï≥Ô∏è': '[#]',
  'üå™Ô∏è': '[~]',
  'üí¨': '[>]',
  '‚ö°': '[!]',
  'üé≠': '[MASK]',
  'üéÆ': '[GAME]',
  'üó∫Ô∏è': '[?]',
  'üìä': '[i]',
  '‚ùå': '[-]',
  'üëÅÔ∏è': '[!]',
  'üí°': '[i]',
  'üéØ': '[#]',
  'üëπ': '[!]'
};

function removeEmojisFromFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // Substituir emojis
    for (const [emoji, replacement] of Object.entries(emojiMap)) {
      const regex = new RegExp(emoji, 'g');
      content = content.replace(regex, replacement);
    }
    
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`[*] Emojis removidos de: ${filePath}`);
  } catch (error) {
    console.error(`[!] Erro ao processar ${filePath}:`, error.message);
  }
}

// Processar arquivos
const filesToProcess = [
  'producers/player-publisher.js',
  'consumers/npc-consumer.js',
  'consumers/invader-consumer.js',
  'api-gateway/server.js'
];

filesToProcess.forEach(file => {
  const fullPath = path.join(__dirname, file);
  if (fs.existsSync(fullPath)) {
    removeEmojisFromFile(fullPath);
  } else {
    console.log(`[!] Arquivo n√£o encontrado: ${fullPath}`);
  }
});

console.log('[*] Processamento conclu√≠do!');
